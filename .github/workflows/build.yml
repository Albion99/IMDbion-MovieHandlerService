name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "7.0.x"

      - name: Restore packages
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

  test:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Restore packages
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Test
        run: |
          dotnet test --no-restore --verbosity normal \
          --collect:"XPlat Code Coverage" --settings:nunit.coverage.runsettings \
          --logger:"nunit;LogFilePath=test-results/TestResult.xml"

  sonar-cloud:
    needs: test
    runs-on: windows-latest

    steps:
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: 'zulu' # Alternative distribution options are available.
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v3
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"Albion99_IMDbion-MovieHandlerService" /o:"albion99" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
          dotnet build --configuration Release
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.cs.vscoveragexml.reportsPaths="F:\Software\IMDbion-MovieHandlerService\TestResults\de106e03-8da5-4c6d-9e74-4b50d260ad34\*.xml" /d:sonar.cs.nunit.reportsPaths="test-results/TestResult.xml"

  build-docker:
    needs: sonar-cloud
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          file: IMDbion_MovieHandlerService/Dockerfile
          context: .
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/movieservice:latest

  deploy:
    needs: build-docker
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Generate kube configuration
        run: |
          mkdir ~/.kube
          touch ~/.kube/config
          echo "${{ secrets.KUBE_CONFIG }}" >> ~/.kube/config

      - name: Create secrets
        run: |
          kubectl delete secret imdbion-movieservice-secrets --ignore-not-found
          kubectl create secret generic imdbion-movieservice-secrets --from-literal=${{ secrets.DATABASE_CONNECTIONSTRING }} --from-literal=RabbitUsername=${{ secrets.RABBIT_USERNAME }} --from-literal=RabbitPassword=${{ secrets.RABBIT_PASSWORD }} --from-literal=RabbitUri=${{ secrets.RABBIT_URI }}

      - name: Deploy application
        run: kubectl apply -f IMDbion_MovieHandlerService/Kubernetes/deployment.yaml

      - name: Restart pod
        run: kubectl rollout restart deploy imdbion-movieservice-deployment